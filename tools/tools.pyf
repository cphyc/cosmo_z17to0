!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module _tools ! in 
    interface  ! in :_tools
        module io ! in :_tools:io.f90
            integer, private :: tmp_unit
            logical, private,optional :: infos_read=.false.
            ! type unknown_type ! in :_tools:io.f90:io
            !     integer, allocatable,dimension(:) :: ids
            !     integer :: parts
            ! end type unknown_type
            ! type unknown_type ! in :_tools:io.f90:io
            !     integer :: ncpu
            !     integer :: ndim
            !     integer :: levelmin
            !     integer :: levelmax
            !     real(kind=8) :: t
            !     real(kind=8) :: aexp
            !     real(kind=8) :: unit_l
            !     real(kind=8) :: unit_t
            !     real(kind=8) :: boxlen
            !     real(kind=8), allocatable,dimension(:) :: bound_key
            ! end type unknown_type
            interface read_list_data ! in :_tools:io.f90:io
                subroutine read_list_data_ints(unit,lines,columns,data) ! in :_tools:io.f90:io:read_list_data
                    integer intent(in) :: unit
                    integer intent(in) :: lines
                    integer intent(in) :: columns
                    integer dimension(lines,columns),intent(out),depend(lines,columns) :: data
                end subroutine read_list_data_ints
                subroutine read_list_data_reals(unit,lines,columns,data) ! in :_tools:io.f90:io:read_list_data
                    integer intent(in) :: unit
                    integer intent(in) :: lines
                    integer intent(in) :: columns
                    real(kind=4) dimension(lines,columns),intent(out),depend(lines,columns) :: data
                end subroutine read_list_data_reals
            end interface read_list_data
            interface write_list ! in :_tools:io.f90:io
                subroutine write_list_reals(filename,lines,columns,data) ! in :_tools:io.f90:io:write_list
                    character*(*) intent(in) :: filename
                    integer, optional,intent(in),check(shape(data,0)==lines),depend(data) :: lines=shape(data,0)
                    integer, optional,intent(in),check(shape(data,1)==columns),depend(data) :: columns=shape(data,1)
                    real(kind=4) dimension(lines,columns),intent(in) :: data
                end subroutine write_list_reals
                subroutine write_list_ints(filename,lines,columns,data) ! in :_tools:io.f90:io:write_list
                    character*(*) intent(in) :: filename
                    integer, optional,intent(in),check(shape(data,0)==lines),depend(data) :: lines=shape(data,0)
                    integer, optional,intent(in),check(shape(data,1)==columns),depend(data) :: columns=shape(data,1)
                    integer dimension(lines,columns),intent(in) :: data
                end subroutine write_list_ints
            end interface write_list
            ! subroutine read_info_headers(filename,infos) ! in :_tools:io.f90:io
            !     character*(*) intent(in) :: filename
            !     type(infos_t) intent(out) :: infos
            ! end subroutine read_info_headers
            subroutine assert_infos(status) ! in :_tools:io.f90:io
                integer intent(out) :: status
            end subroutine assert_infos
            ! subroutine read_particle(basepath,output,cpu,nstar,pos,vel,m,ids,birth_date,ndim,nparts) ! in :_tools:io.f90:io
            !     character*(*) intent(in) :: basepath
            !     integer intent(in) :: output
            !     integer intent(in) :: cpu
            !     integer intent(out) :: nstar
            !     real(kind=8), allocatable,dimension(:,:),intent(out) :: pos
            !     real(kind=8), allocatable,dimension(:,:),intent(out) :: vel
            !     real(kind=8), allocatable,dimension(:),intent(out) :: m
            !     integer, allocatable,dimension(:),intent(out) :: ids
            !     real(kind=8), allocatable,dimension(:),intent(out) :: birth_date
            !     integer intent(out) :: ndim
            !     integer intent(out) :: nparts
            ! end subroutine read_particle
            subroutine read_particle_header(filename,ndim,nparts,tmp_unit) ! in :_tools:io.f90:io
                character*(*) intent(in) :: filename
                integer intent(out) :: ndim
                integer intent(out) :: nparts
                integer intent(out) :: tmp_unit
            end subroutine read_particle_header
            subroutine read_particle_data(ndim,nparts,tmp_unit,nstar,pos,vel,m,ids,birth_date) ! in :_tools:io.f90:io
                integer intent(in) :: ndim
                integer intent(in) :: nparts
                integer intent(in) :: tmp_unit
                integer intent(out) :: nstar
                real(kind=8) dimension(ndim,nparts),intent(out),depend(ndim,nparts) :: pos
                real(kind=8) dimension(ndim,nparts),intent(out),depend(ndim,nparts) :: vel
                real(kind=8) dimension(nparts),intent(out),depend(nparts) :: m
                integer dimension(nparts),intent(out),depend(nparts) :: ids
                real(kind=8) dimension(nparts),intent(out),depend(nparts) :: birth_date
            end subroutine read_particle_data
            ! subroutine read_brick_header(filename,infos,nbodies,aexp,age_univ,nb_of_halos,nb_of_subhalos) ! in :_tools:io.f90:io
            !     character*(*) intent(in) :: filename
            !     type(infos_t) intent(in) :: infos
            !     integer intent(out) :: nbodies
            !     real(kind=4) intent(out) :: aexp
            !     real(kind=4) intent(out) :: age_univ
            !     integer intent(out) :: nb_of_halos
            !     integer intent(out) :: nb_of_subhalos
            ! end subroutine read_brick_header
            ! subroutine read_brick_data(nb_of_dm,infos,dm_type,mdm,posdm,rvirdm,mvirdm,tvirdm,hlevel,ldm,iddm,members) ! in :_tools:io.f90:io
            !     integer intent(in) :: nb_of_dm
            !     type(infos_t) intent(in) :: infos
            !     logical intent(in) :: dm_type
            !     real(kind=8) dimension(nb_of_dm),intent(out),depend(nb_of_dm) :: mdm
            !     real(kind=8) dimension(infos%ndim,nb_of_dm),intent(out),depend(infos,nb_of_dm) :: posdm
            !     real(kind=8) dimension(nb_of_dm),intent(out),depend(nb_of_dm) :: rvirdm
            !     real(kind=8) dimension(nb_of_dm),intent(out),depend(nb_of_dm) :: mvirdm
            !     real(kind=8) dimension(nb_of_dm),intent(out),depend(nb_of_dm) :: tvirdm
            !     real(kind=8) dimension(nb_of_dm),intent(out),depend(nb_of_dm) :: hlevel
            !     real(kind=8) dimension(infos%ndim,nb_of_dm),intent(out),depend(infos,nb_of_dm) :: ldm
            !     integer dimension(nb_of_dm),intent(out),depend(nb_of_dm) :: iddm
            !     type(members_t) dimension(nb_of_dm),intent(out),depend(nb_of_dm) :: members
            ! end subroutine read_brick_data
            subroutine read_list_header(filename,unit,lines,columns) ! in :_tools:io.f90:io
                character*(*) intent(in) :: filename
                integer intent(out) :: unit
                integer intent(out) :: lines
                integer intent(out) :: columns
            end subroutine read_list_header
            ! subroutine read_mergertree_headers_1(mergertree_file,nsteps) ! in :_tools:io.f90:io
            !     character*(*) intent(in) :: mergertree_file
            !     integer(kind=4) intent(out) :: nsteps
            ! end subroutine read_mergertree_headers_1
            ! subroutine read_mergertree_headers_2(nb_of_halos,nb_of_subhalos,aexp,omega_t,age_univ,nsteps) ! in :_tools:io.f90:io
            !     integer dimension(nsteps),intent(out),depend(nsteps) :: nb_of_halos
            !     integer dimension(nsteps),intent(out),depend(nsteps) :: nb_of_subhalos
            !     real(kind=4) dimension(nsteps),intent(out),depend(nsteps) :: aexp
            !     real(kind=4) dimension(nsteps),intent(out),depend(nsteps) :: omega_t
            !     real(kind=4) dimension(nsteps),intent(out),depend(nsteps) :: age_univ
            !     integer intent(in) :: nsteps
            ! end subroutine read_mergertree_headers_2
            ! subroutine read_mergertree_parent_of(nhalos,nhalos_at_step,nsteps,halos_z0,parent) ! in :_tools:io.f90:io
            !     use misc
            !     integer intent(in) :: nhalos
            !     integer dimension(nsteps),intent(in) :: nhalos_at_step
            !     integer, optional,intent(in),check(len(nhalos_at_step)>=nsteps),depend(nhalos_at_step) :: nsteps=len(nhalos_at_step)
            !     integer dimension(nhalos_at_step(nsteps)),intent(out),depend(nhalos_at_step,nsteps) :: halos_z0
            !     integer dimension(nhalos,nsteps),intent(out),depend(nhalos,nsteps) :: parent
            ! end subroutine read_mergertree_parent_of
            ! subroutine read_mergertree_positions(halos,steps,pos,vel,nhalos_at_step,nhalos,nsteps) ! in :_tools:io.f90:io
            !     integer dimension(nhalos + 1),intent(in) :: halos
            !     integer dimension(nhalos + 1),intent(in),depend(nhalos) :: steps
            !     real(kind=4) dimension(nhalos,3),intent(out),depend(nhalos) :: pos
            !     real(kind=4) dimension(nhalos,3),intent(out),depend(nhalos) :: vel
            !     integer dimension(nsteps),intent(in) :: nhalos_at_step
            !     integer, optional,intent(in),check((len(halos)-1)>=nhalos),depend(halos) :: nhalos=(len(halos)-1)
            !     integer, optional,intent(in),check(len(nhalos_at_step)>=nsteps),depend(nhalos_at_step) :: nsteps=len(nhalos_at_step)
            ! end subroutine read_mergertree_positions
            ! subroutine read_1(halo_id,nb_of_fathers) ! in :_tools:io.f90:io
            !     integer intent(out) :: halo_id
            !     integer intent(out) :: nb_of_fathers
            ! end subroutine read_1
            ! subroutine read_1_dynamics(halo_id,pos,vel,nb_of_fathers) ! in :_tools:io.f90:io
            !     integer intent(out) :: halo_id
            !     real(kind=4) dimension(3),intent(out) :: pos
            !     real(kind=4) dimension(3),intent(out) :: vel
            !     integer intent(out) :: nb_of_fathers
            ! end subroutine read_1_dynamics
            ! subroutine read_2_dummy(nb_of_fathers) ! in :_tools:io.f90:io
            !     integer intent(in) :: nb_of_fathers
            ! end subroutine read_2_dummy
            ! subroutine read_2(nb_of_fathers,idfather,mfather) ! in :_tools:io.f90:io
            !     integer intent(in) :: nb_of_fathers
            !     integer(kind=4) dimension(nb_of_fathers),intent(out),depend(nb_of_fathers) :: idfather
            !     real(kind=4) dimension(nb_of_fathers),intent(out),depend(nb_of_fathers) :: mfather
            ! end subroutine read_2
        end module io
        subroutine read_list_data_reals(unit,lines,columns,data) ! in :_tools:io.f90
            integer intent(in) :: unit
            integer intent(in) :: lines
            integer intent(in) :: columns
            real(kind=4) dimension(lines,columns),intent(out),depend(lines,columns) :: data
        end subroutine read_list_data_reals
        subroutine read_list_data_ints(unit,lines,columns,data) ! in :_tools:io.f90
            integer intent(in) :: unit
            integer intent(in) :: lines
            integer intent(in) :: columns
            integer dimension(lines,columns),intent(out),depend(lines,columns) :: data
        end subroutine read_list_data_ints
        subroutine write_list_reals(filename,lines,columns,data) ! in :_tools:io.f90
            character*(*) intent(in) :: filename
            integer, optional,intent(in),check(shape(data,0)==lines),depend(data) :: lines=shape(data,0)
            integer, optional,intent(in),check(shape(data,1)==columns),depend(data) :: columns=shape(data,1)
            real(kind=4) dimension(lines,columns),intent(in) :: data
        end subroutine write_list_reals
        subroutine write_list_ints(filename,lines,columns,data) ! in :_tools:io.f90
            character*(*) intent(in) :: filename
            integer, optional,intent(in),check(shape(data,0)==lines),depend(data) :: lines=shape(data,0)
            integer, optional,intent(in),check(shape(data,1)==columns),depend(data) :: columns=shape(data,1)
            integer dimension(lines,columns),intent(in) :: data
        end subroutine write_list_ints
        module misc ! in :_tools:misc.f90
            interface minmax ! in :_tools:misc.f90:misc
                subroutine minmax_r(array,min_bn,max_bn) ! in :_tools:misc.f90:misc:minmax
                    real(kind=8) dimension(:),intent(in) :: array
                    real(kind=8) intent(out) :: min_bn
                    real(kind=8) intent(out) :: max_bn
                end subroutine minmax_r
                subroutine minmax_i(array,min_bn,max_bn) ! in :_tools:misc.f90:misc:minmax
                    integer dimension(:),intent(in) :: array
                    integer intent(out) :: min_bn
                    integer intent(out) :: max_bn
                end subroutine minmax_i
            end interface minmax
            interface meanval ! in :_tools:misc.f90:misc
                subroutine mean_1(array,mean,n) ! in :_tools:misc.f90:misc:meanval
                    real(kind=8) dimension(n),intent(in) :: array
                    real(kind=8) intent(out) :: mean
                    integer, optional,intent(in),check(len(array)>=n),depend(array) :: n=len(array)
                end subroutine mean_1
                subroutine mean_2(array,mean,n,m) ! in :_tools:misc.f90:misc:meanval
                    real(kind=8) dimension(n,m),intent(in) :: array
                    real(kind=8) dimension(n),intent(out),depend(n) :: mean
                    integer, optional,intent(in),check(shape(array,0)==n),depend(array) :: n=shape(array,0)
                    integer, optional,intent(in),check(shape(array,1)==m),depend(array) :: m=shape(array,1)
                end subroutine mean_2
            end interface meanval
            interface stddev ! in :_tools:misc.f90:misc
                subroutine stddev_1(array,mean,n) ! in :_tools:misc.f90:misc:stddev
                    real(kind=8) dimension(n),intent(in) :: array
                    real(kind=8) intent(out) :: mean
                    integer, optional,intent(in),check(len(array)>=n),depend(array) :: n=len(array)
                end subroutine stddev_1
                subroutine stddev_2(array,mean,n,m) ! in :_tools:misc.f90:misc:stddev
                    real(kind=8) dimension(n,m),intent(in) :: array
                    real(kind=8) dimension(n),intent(out),depend(n) :: mean
                    integer, optional,intent(in),check(shape(array,0)==n),depend(array) :: n=shape(array,0)
                    integer, optional,intent(in),check(shape(array,1)==m),depend(array) :: m=shape(array,1)
                end subroutine stddev_2
            end interface stddev
            subroutine hilbert3d(x,y,z,order,bit_length,npoint) ! in :_tools:misc.f90:misc
                integer dimension(npoint),intent(in) :: x
                integer dimension(npoint),intent(in),depend(npoint) :: y
                integer dimension(npoint),intent(in),depend(npoint) :: z
                real(kind=8) dimension(npoint),intent(out),depend(npoint) :: order
                integer intent(in) :: bit_length
                integer, optional,intent(in),check(len(x)>=npoint),depend(x) :: npoint=len(x)
            end subroutine hilbert3d
            subroutine quick_sort(list,order) ! in :_tools:misc.f90:misc
                integer dimension(:),intent(inout) :: list
                integer, optional,dimension(size(list)),intent(out),depend(list) :: order
            end subroutine quick_sort
            subroutine rquick_sort(a) ! in :_tools:misc.f90:misc
                real dimension(:),intent(inout) :: a
            end subroutine rquick_sort
            subroutine get_cpu_list(x0,x1,levelmax,bound_key,cpu_list,ncpu,ndim) ! in :_tools:misc.f90:misc
                real(kind=8) dimension(ndim),intent(in) :: x0
                real(kind=8) dimension(ndim),intent(in),depend(ndim) :: x1
                integer intent(in) :: levelmax
                real(kind=8) dimension(ncpu + 1),intent(in) :: bound_key
                integer dimension(ncpu),intent(out),depend(ncpu) :: cpu_list
                integer, optional,intent(in),check((len(bound_key)-1)>=ncpu),depend(bound_key) :: ncpu=(len(bound_key)-1)
                integer, optional,intent(in),check(len(x0)>=ndim),depend(x0) :: ndim=len(x0)
            end subroutine get_cpu_list
            function indexof(element,array) ! in :_tools:misc.f90:misc
                integer intent(in) :: element
                integer dimension(:),intent(in) :: array
                integer :: indexof
            end function indexof
            subroutine max_index(array,imax) ! in :_tools:misc.f90:misc
                real(kind=4) dimension(:),intent(in) :: array
                integer intent(out) :: imax
            end subroutine max_index
            function median(a,n,m) ! in :_tools:misc.f90:misc
                real dimension(n,m),intent(in) :: a
                integer, optional,intent(in),check(shape(a,0)==n),depend(a) :: n=shape(a,0)
                integer, optional,intent(in),check(shape(a,1)==m),depend(a) :: m=shape(a,1)
                real dimension(n) :: median
            end function median
            subroutine unique(array,u_array) ! in :_tools:misc.f90:misc
                integer dimension(:),intent(in) :: array
                integer dimension(size(array)),intent(out),depend(array) :: u_array
            end subroutine unique
            subroutine fill(array,val,counter) ! in :_tools:misc.f90:misc
                integer dimension(:),intent(inout) :: array
                integer intent(in) :: val
                integer intent(out) :: counter
            end subroutine fill
        end module misc
        subroutine minmax_r(array,min_bn,max_bn) ! in :_tools:misc.f90
            real(kind=8) dimension(:),intent(in) :: array
            real(kind=8) intent(out) :: min_bn
            real(kind=8) intent(out) :: max_bn
        end subroutine minmax_r
        subroutine minmax_i(array,min_bn,max_bn) ! in :_tools:misc.f90
            integer dimension(:),intent(in) :: array
            integer intent(out) :: min_bn
            integer intent(out) :: max_bn
        end subroutine minmax_i
        subroutine mean_1(array,mean,n) ! in :_tools:misc.f90
            real(kind=8) dimension(n),intent(in) :: array
            real(kind=8) intent(out) :: mean
            integer, optional,intent(in),check(len(array)>=n),depend(array) :: n=len(array)
        end subroutine mean_1
        subroutine mean_2(array,mean,n,m) ! in :_tools:misc.f90
            real(kind=8) dimension(n,m),intent(in) :: array
            real(kind=8) dimension(n),intent(out),depend(n) :: mean
            integer, optional,intent(in),check(shape(array,0)==n),depend(array) :: n=shape(array,0)
            integer, optional,intent(in),check(shape(array,1)==m),depend(array) :: m=shape(array,1)
        end subroutine mean_2
        subroutine stddev_1(array,std,n) ! in :_tools:misc.f90
            real(kind=8) dimension(n),intent(in) :: array
            real(kind=8) intent(out) :: std
            integer, optional,intent(in),check(len(array)>=n),depend(array) :: n=len(array)
        end subroutine stddev_1
        subroutine stddev_2(array,std,n,m) ! in :_tools:misc.f90
            real(kind=8) dimension(n,m),intent(in) :: array
            real(kind=8) dimension(n),intent(out),depend(n) :: std
            integer, optional,intent(in),check(shape(array,0)==n),depend(array) :: n=shape(array,0)
            integer, optional,intent(in),check(shape(array,1)==m),depend(array) :: m=shape(array,1)
        end subroutine stddev_2
    end interface 
end python module _tools

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
